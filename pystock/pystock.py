import datetime as dt
import math

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import yfinance as yahooFinance # type: ignore
from pandas_datareader import data as pdr
from scipy.optimize import fsolve


def fetch_stock_data(ticker: str, length: int) -> pd.DataFrame:
    """fetches pandas dataframe of stock prices for a given ticker

        ticker (str): stock ticker
        length (int): number of days of data to fetch

    Raises:
        TypeError: incorrect/inavlid type given to function
        ConnectionError: invalid ticker given to function

    Returns:
        pd.DataFrame: dataframe containing stock data
    """
    if not isinstance(ticker, str) or not isinstance(length, int) or length < 2:
        raise TypeError()
    end = dt.datetime.now()
    start = end - dt.timedelta(days=length)

    yahooFinance.pdr_override()

    df = pdr.get_data_yahoo(ticker, start, end)

    if df.empty:
        raise ConnectionError("Invalid Ticker")

    df["Average"] = (df["High"] + df["Low"]) / 2

    return df


def calculate_black_scholes_sigma(dataframe: pd.DataFrame) -> float:
    """calculate the sigma value for the black-scholes equation

    Args:
        dataframe (pd.DataFrame): stock dataframe generated by fetch_stock_data

    Returns:
        float: sigma value calculated from black-scholes equation
    """
    if not isinstance(dataframe, pd.DataFrame):
        raise TypeError

    dataframe["Mean"] = (dataframe["High"] + dataframe["Low"]) / 2
    mean = dataframe["Mean"].mean()
    variance = dataframe["Mean"].var()

    def generate_black_scholes_system_of_equations(vars):
        return [
            math.exp(2 * math.log(mean))
            + vars[0] ** 2 * math.exp(vars[0])
            - math.exp(2 * math.log(mean) - vars[0] ** 2)
            - vars[0] ** 2
            - variance,
        ]

    sigma = fsolve(generate_black_scholes_system_of_equations, [0.1])

    return sigma[0]


def black_scholes_predict_next(
    price: float, interest: float, sigma: float, timedelta: float, epsilon: float = 0
) -> float:
    """predicts the next stock price based on the black-scholes algorithm

    Args:
        price (float): current price of stock
        interest (float): interest rate of stock
        sigma (float): black-scholes sigma value
        timedelta (float): amount of time passed for this prediction
        epsilon (float, optional): value for testing. Defaults to 0.

    Raises:
        TypeError: incorrect input type input

    Returns:
        float: predicted stock price after timedelta
    """
    if (
        not isinstance(price, float)
        or not isinstance(interest, float)
        or not isinstance(sigma, float)
        or not isinstance(timedelta, float)
    ):
        raise TypeError

    if epsilon == 0:
        epsilon = np.random.normal()
    return price * np.exp(
        (interest - (sigma**2) / 2) * timedelta + sigma * np.sqrt(timedelta) * epsilon
    )


def simulate_stock_price(
    price: float, interest: float, sigma: float, num_days: int
) -> np.ndarray:
    """simulate stock prices for a certain number of days

    Args:
        price (float): current stock price
        interest (float): stock interest rate
        sigma (float): black-scholes sigma value
        num_days (int): number of days to simulate

    Raises:
        TypeError: _description_

    Returns:
        np.darray: array of predicted stock prices
    """
    if (
        not isinstance(price, float)
        or not isinstance(interest, float)
        or not isinstance(sigma, float)
        or not isinstance(num_days, int)
    ):
        raise TypeError

    timedelta = 1 / num_days
    predicted_prices = [price]

    predicted_prices.extend(
        black_scholes_predict_next(predicted_prices[idx], interest, sigma, timedelta)
        for idx in range(num_days - 1)
    )

    return np.array(predicted_prices)


def simulate_stock_improved(
    price: float, interest: float, sigma: float, num_days: int
) -> np.ndarray:
    """simulate stock price prediction for a number of days 1000 times

    Args:
        price (float): current stock price
        interest (float): stock interest
        sigma (float): black-scholes sigma value
        num_days (int): number of days to simulate

    Raises:
        TypeError: invalid type passed to function

    Returns:
        np.ndarray: 1000 stock price simulations
    """
    if (
        not isinstance(price, float)
        or not isinstance(interest, float)
        or not isinstance(sigma, float)
        or not isinstance(num_days, int)
    ):
        raise TypeError

    return np.array(
        [simulate_stock_price(price, interest, sigma, num_days) for _ in range(1000)]
    ).T


def run_program():
    ticker = input("Stock Ticker: ").strip()
    num_days_stock = int(input("Number of Days to Gather Data: ").strip())
    dataframe = fetch_stock_data(ticker, num_days_stock)

    stock_price = dataframe["Average"].astype(float).tail(1)[0]
    interest = 0.05
    sigma = calculate_black_scholes_sigma(dataframe)
    num_days_simulate = int(input("Number of Days to simulate: ").strip())
    simulated_prices = simulate_stock_improved(
        stock_price, interest, sigma, num_days_simulate
    )

    plt.plot(simulated_prices)
    plt.show()

    simulated_stocks = [
        simulated_prices[i, :].mean() for i in range(len(simulated_prices))
    ]

    stock_list = dataframe["Average"].to_list()
    stock_list.extend(simulated_stocks)
    print(np.arange(-1 * len(dataframe["Average"]), num_days_simulate + 1, 1))
    plt.plot(
        np.arange(-1 * len(dataframe["Average"]) + 1, num_days_simulate + 1, 1),
        stock_list,
    )
    plt.show()
